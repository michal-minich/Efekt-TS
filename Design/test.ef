
var expr : Exp = exp 1 + 1
var bool : Bool = true
var char : UniCodeUnit8 = 'g'
var char : UniCodeUnit8 = '̆ '
var char : UniCodeUnit16 = 'ğ'
var char : UniCodePoint = 'ğ'
var char : Char = 'ğ '
var byte : Byte = 255
var text : Text = 'abc"  // Array(Char, #)
var int  : Int = 123
var dbl  : Double = 3.13
var arr  : Array(Int, 3)
var type : Type
var func : fn () {}
var ifc  : new interface {}
var obj  : new class {}
var stru : new struct {} // ?
var unio : new union {} // ?

var I : interface {}
var C : class {}
var S : struct {}
var U : union {}


if test then true end
if test then true else false end
foreach item in collection do body end
while test do body end
do body while test end
loop body end
break
continue
label name
goto name
return expression
yield expression

var props:
is fn param var
is local var
is global var
is shared global var

var props (fn):
writesIO
readsIO

any
  get type value
value / type
  unused
  return
  assign to fn param var (pass down)
  assign to local var
  assign to global var
  assign to shared global var
  assign to it
  compare for identity
  compare for value
  use symbol
  get binary representation
binary representation
  get size
  get value
value (fn)
  apply
value (Type)
  get signature expression
value (Array)
  get value at index
  get length value
value (Ref)

var x = new ref Int(3);


var Any = struct { all built in }
var Type = struct (T of Type) { }
var Exp = struct (E... of Exp) {  all built in }
var AnyOf = struct (T...) {  }

@
deterministic (result does not depends on readsIO, or readsMutableGlobal)
  constant
modifiesGlobal
readsImmutableGlobal
readsMutableGlobal
writesIO
readsIO
modifiesVar

var a
var a = 1
var a : A = 1
var a : A of Any = 1
var     A = Int
var     A of Any = Int


var @unsafe = attribute (a : A of Any, b : A)

var @safe = attribute
var @unsafe = attribute not @safe

var Percent = struct () extends Int {
    invariant {
        assert value <= 100 and value >= 0
    }
}

var a = fn () {
     var x = @unsafe fn () {}
     assume not @unsafe x()
}

// comment
/* comment */


var Shape     = interface { }
var Box       = struct of Shape {}
var Rectangle = struct of Box {}
var Circle    = struct of Shape {}

var arr : Array(out Shape) = new Array(Box, 1)
var item : Shape = arr.get(0)

var arr : Array(in Rectangle) = new Array(Box, 1)
arr.add(new Rectangle)

var arr : Array = new Array(Box, 1)
arr.count


var Comparer = interface (in A : Any, in B : Any) {
    var callable = fn (a : A, b : B) -> Int
}

implicit var ComparerBoxBox = struct of Comparer(Box, Box) {
    var callable = fn (a, b) { }
}


var max
: Fn(A, B, Comparer(A, B), MaxType(a, b, c))
= fn (a, b, implicit c) {
    return if c(a, b) == 0 then a, else b end
}

var max = fn (a : A, b : any B, implicit c : Comparer(A, B)) -> MaxType(a, b, c) {
    return if c(a, b) == 0 then a, else b end
}

var MaxType = fn (a, b, implicit c : Comparer(TypeOf(a), TypeOf(b))) -> AnyOf(TypeOf(a), TypeOf(b)) {
    return if c(a, b) == 0 then TypeOf(a) else TypeOf(b) end
}

var first = (arr: Array(any A)) -> A
    requires arr.length >= 1 {
    return arr[0]
}

var CommonType = fn (a : Numeric, b : Numeric) -> AnyOf(Int, Double) {
    if a.Type.isInt && b.Type.isInt then return Int else return Double
}

// ==================================


var IdentityComparer = interface (in A of Any, in B of Any) {
    var op== = fn (a : Any, b : Any) -> Bool
}


implicit var AnyIdentityComparer = struct of IdentityComparer (Any, Any) {
    var op== = fn (a, b) { }
}


implicit var IntIdentityComparer = struct with IdentityComparer (Int, Int) {
    var op== = fn (a, b) { }
}


implicit var ArrayIdentityComparer = struct of IdentityComparer (Slice, Slice) {
    var op== = fn (a, b) {
        var n = 0
        if a.length != b.length then
            return false
        loop {
            if n == a.length then
                break
            n.inc()
            if a!i != b!i then
                return false
        }
        return true
    }
}

var Any = interface {
}


var AnyValue = interface of Any {
}


var AnyType = interface of Any {
}


var Void = struct of Any { }

var Iterator = interface (out T) {
    property var ElementType = fn () -> Any { T }
    property var hasNext() -> Bool { ... }
    property var getNext() -> T { ... }
    property var reset() -> Void { ... }
}

var ResetableIterator = interface (out T) Iterator(T) {
    property var reset() -> Void { ... }
}

var IteratorWithLegth = interface (out T) of Iterator(T) {
    property var length = fn () { ... }
}

var Slice = interface (out T, implicit out S of Slice(T)) of Iterator(T) {
    property var get (index : Long) -> T { ... }
    property var slice (index : Long, length : Long) -> S { ... }
}

var IArray = interface (T) with Slice(T) {
    property var set (index : Long, in value : T) -> Void { ... }
}

var Array = struct {
}

var ArrayIArray = extension (T) of Array(T) with Slice(T) {
    property var get = fn (index : Long) -> T { }
}

var List = interface (out T, R) of Array(T) {
    property var select (selector : fn (T) -> R) -> List(R) { ... }
}

var Array = (fn (T of Any) {
    interface of Slice (T) {
        property var set (index : Long, in value : T) -> Void { ... }
    }
}())




